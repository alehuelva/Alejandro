<?php

namespace Blogger\BlogBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * BlogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BlogRepository extends EntityRepository
{
	public function getLatestBlogs($limit = null) //Get the last comments in the blog
	{
		$qb = $this->createQueryBuilder('b')
			   ->select('b')
			   ->leftJoin('b.comments', 'c')
			   ->addOrderBy('b.created', 'DESC');

		if (false === is_null($limit))
			$qb->setMaxResults($limit);
		return $qb->getQuery()
			  ->getResult();
	}

public function getTags() //Return the tags
{
    $blogTags = $this->createQueryBuilder('b')
                     ->select('b.tags')
                     ->getQuery()
                     ->getResult();

    $tags = array();
    foreach ($blogTags as $blogTag)
    {
        $tags = array_merge(explode(",", $blogTag['tags']), $tags);  //array_merge combines 2 arrays and explode return an array $tags  
    }																//whose fields are filled in with $blogTag['tags'], being each entry,
																	//the words separated by commas in it
    foreach ($tags as &$tag)
    {
        $tag = trim($tag); //Delete the white space in the beginning and in the end of the array
    }

    return $tags;
}

public function getTagWeights($tags)
{
    $tagWeights = array();
    if (empty($tags))
        return $tagWeights;

    foreach ($tags as $tag)
    {
        $tagWeights[$tag] = (isset($tagWeights[$tag])) ? $tagWeights[$tag] + 1 : 1; //isset Check true if there is not null value 
    }																				//If returns true, tagweights +1; else return 1
    // Shuffle the tags
    uksort($tagWeights, function() {
        return rand() > rand();
    });

    $max = max($tagWeights);

    // Max of 5 weights
    $multiplier = ($max > 5) ? 5 / $max : 1;
    foreach ($tagWeights as &$tag)
    {
        $tag = ceil($tag * $multiplier);
    }

    return $tagWeights;
}

}
